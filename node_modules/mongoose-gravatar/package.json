{
  "name": "mongoose-gravatar",
  "version": "0.2.1",
  "description": "Mongoose plugin for generating gravatar.com urls",
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "mongoose": "~3.6.11",
    "mocha": "1.11.0"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:cristiandouce/mongoose-gravatar.git"
  },
  "keywords": [
    "gravatar",
    "mongoose",
    "avatar"
  ],
  "author": {
    "name": "Cristian Douce",
    "email": "cristian@gravityonmars.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/cristiandouce/mongoose-gravatar/issues"
  },
  "readme": "# mongoose-gravatar\n\n  Mongoose plugin to dynamically generate gravatar urls.\n\n  [![Build Status](https://travis-ci.org/cristiandouce/mongoose-gravatar.png?branch=master)](https://travis-ci.org/cristiandouce/mongoose-gravatar)\n\n## Installation\n\n```\n  $ npm install mongoose-gravatar\n```\n\n## Usage example\n\n```js\n  var gravatar = require('mongoose-gravatar');\n  var UserSchema = new Schema({ email: String });\n\n  // Extend User's Schema with gravatar plugin\n  UserSchema.plugin(gravatar);\n\n  // or... provide some default options for plugin\n  var options = { secure: true, default: \"retro\", size: 245 };\n  UserSchema.plugin(gravatar, options);\n\n  // ...\n\n  var author = new User({ email: 'jorge@ups.com'});\n\n  // retrieves a normal gravatar url\n  author.gravatar()\n  // out: 'http://www.gravatar.com/avatar/23463b99b62a72f26ed677cc556c44e8'\n\n  // retrieves a secure (https) gravatar url\n  author.gravatar({ secure: true })\n  // out: 'https://secure.gravatar.com/avatar/23463b99b62a72f26ed677cc556c44e8'\n  \n  // sets size to 150px width and height\n  author.gravatar({ size: 150 });\n  // out: 'http://www.gravatar.com/avatar/23463b99b62a72f26ed677cc556c44e8?s=150'\n\n  // With provided options at plugin level...\n  author.gravatar()\n  // out: https://secure.gravatar.com/avatar/23463b99b62a72f26ed677cc556c44e8?d=retro&s=245\n```\n\n## API options list\nThe following are the list of options allowed for `.gravatar()` model method.\n* `secure`: Compiles a secure url for gravatars. Check `gravatar.com` [docs](http://en.gravatar.com/site/implement/images/#secure-images) for more info.\n* `email`: Returns a gravatar url for a different email than the model's.\n* `size`: Determines the size of the image delivered by `gravatar.com`. Check `gravatar.com` [docs](http://en.gravatar.com/site/implement/images/#size) for more info.\n* `default`: Sets a default image when email has no avatar registered at `gravatar.com`. Check `gravatar.com` [docs](http://en.gravatar.com/site/implement/images/#default-image) for more info.\n* `forcedefault`: Forces default image. Check `gravatar.com` [docs](http://en.gravatar.com/site/implement/images/#force-default) for more info.\n* `rating`: Sets self-rated image policy. Check `gravatar.com` [docs](http://en.gravatar.com/site/implement/images/#rating) for more info.\n\n\n## Test\n\n```\n  $ npm install --dev\n  $ make test\n```\n## License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/cristiandouce/mongoose-gravatar",
  "_id": "mongoose-gravatar@0.2.1",
  "dist": {
    "shasum": "2b273dd3152c20637e09a2d18f03643a8767e9d2"
  },
  "_from": "mongoose-gravatar@~0.2.1",
  "_resolved": "https://registry.npmjs.org/mongoose-gravatar/-/mongoose-gravatar-0.2.1.tgz"
}
